======================================================================================
Первый запуск приложения
0. Удалить все контейнеры и volumes
1. Из папки docker запустить в терминале 'docker compose up -d'
происходит сборка и запуск контейнеров с базой данных и админкой
2. Включаем инициализацию БД:
application.yml:
      sql:
        init:
            mode: always
3. Запускаем приложение:
происходит инициализация базы данных с помощью файла db_init.sql
- создаются таблицы users, roles, user_roles, credentials, confirmations
- в таблицу users добавлен пользователь SYSTEM c id = 0
- в таблицу roles добавлены роли ADMIN и USER c id = 1 и 2 соответственно
4. Останавливаем приложение
5. Выключаем инициализацию БД
application.yml:
    sql:
        init:
            mode: never
======================================================================================
Формирование HTTP ответа
Класс RequestUtils

Два основных публичных метода:
* getResponse
    - используется для формирования HTTP-ответа в нормальном режиме
    - обычно вызывается из контроллера при формировании ResponseEntity
    - принимает HttpServletRequest, Map с различными данными, текстовое сообщение и HttpStatus
    - возвращает объект Response с заполненными полями

* handlerErrorResponse
    - используется для формирования HTTP-ответа в случае ошибки
    - вызывается из фильтра AuthenticationFilter в случае возникновения исключений при попытке аутентификации
    - принимает HttpServletRequest, HttpServletResponse и Exception
    - ничего не возвращает
    - использует приватный метод getErrorResponse для формирования ответа - объекта Response
    - записывает ответ Response в HttpServletResponse используя приватную функцию writeResponse этого же класса

Приватные методы:
* метод getErrorResponse
    - используется для формирования HTTP-ответа и вызывается из метода handlerErrorResponse того же класса
    - принимает HttpServletRequest, HttpServletResponse, Exception и HttpStatus
    - использует приватную функцию errorReason для получения текстового описания ошибки
    - возвращает объект Response с заполненными полями
* функция errorReason
    - является статической константой, т.е. доступна всем экземплярам класса и не может быть переопределёна
    - является функциональным интерфейсом Function, который принимает Exception и возвращает String
    - используется для получения текстового описания ошибки из метода getErrorResponse того же класса
    - используется для заполнения поля message объекта Response
* функция writeResponse
    - является статической константой, т.е. доступна всем экземплярам класса и не может быть переопределёна
    - использует функциональный интерфейс BiConsumer, который принимает два аргумента (HttpServletResponse и Response) ничего не возвращает
    - записывает объект Response в HTTP-ответ HttpServletResponse в формате JSON
    - использует метод writeValueAsString библиотеки Jackson для преобразования объекта Response в строку JSON
======================================================================================

