### Проект - TSP

**Название:** Task Management Platform 
**Описание:** Платформа для управления задачами с поддержкой микросервисной архитектуры, асинхронной обработки сообщений через Kafka, а также встроенной интеграцией ChatGPT для автоматизации создания задач, помощи пользователям и анализа активности системы. Проект включает функционал для работы с пользователями, ролями, уведомлениями и поддерживает рекомендации и взаимодействие с системой через интеллектуальный чат.

---

### Архитектура проекта:

**Frontend:**
- **Vue.js**: Интерфейс для взаимодействия с пользователями, поддерживающий создание и управление задачами, комментариями, а также интеллектуальный чат для общения с ChatGPT.
  - Включает регистрацию и авторизацию через JWT.
  - Компоненты для создания и редактирования задач, просмотра уведомлений, работы с комментариями и взаимодействия с ChatGPT для автоматизации задач.

**Backend (микросервисы на Spring Boot):**
1. **User Service**:
   - Управление пользователями (регистрация, авторизация, роли).
   - Безопасность через **Spring Security** и **JWT**.
   - Хранение данных в **PostgreSQL**.

2. **Task Service**:
   - Создание, редактирование, удаление задач.
   - Управление статусами задач, приоритетами, комментариями.
   - Публикация событий о создании или изменении задач в **Kafka**.
   - Хранение данных в **PostgreSQL**.

3. **Notification Service**:
   - Подписан на события Kafka, связанные с задачами и комментариями.
   - Отправка уведомлений пользователям через email или push-уведомления.
   - Асинхронная обработка сообщений через **Kafka**.

4. **Audit Service**:
   - Логирование всех действий в системе (создание задач, изменения, комментарии).
   - Хранение журналов активности для аудита.

5. **Gateway Service**:
   - Маршрутизация запросов от фронтенда к микросервисам.
   - JWT-аутентификация и авторизация на уровне Gateway.

6. **ChatGPT Service**:
   - Интеграция с **OpenAI API** для обработки запросов пользователей через чат.
   - Поддержка создания задач через взаимодействие с пользователем.
   - Анализ активности и рекомендации на основе пользовательских запросов.

---

### Технологический стек:

**Frontend:**
- **Vue.js**: Для создания динамического интерфейса.
- **Axios**: Для взаимодействия с backend API.
- **JWT**: Для аутентификации.
- **Chat-интерфейс**: Компонент для взаимодействия с ChatGPT.

**Backend:**
- **Spring Boot**: Для разработки микросервисов.
- **Spring Security**: Для защиты API с помощью JWT.
- **Kafka**: Брокер сообщений для обмена событиями между микросервисами.
- **PostgreSQL**: База данных для хранения данных о пользователях и задачах.
- **Redis**: Для кеширования.
- **Docker**: Контейнеризация всех сервисов.
- **Kubernetes**: Оркестрация контейнеров.
- **GitHub Actions**: Автоматизация CI/CD.
- **Prometheus и Grafana**: Мониторинг состояния сервисов.
- **Helm**: Управление конфигурациями Kubernetes.
- **OpenAI API**: Для интеграции ChatGPT.

---

### Основные фичи проекта:

1. **Аутентификация и авторизация:**
   - Пользователи могут регистрироваться и авторизоваться через JWT.
   - Ограничение доступа к API на основе ролей.

2. **Управление задачами:**
   - Пользователи могут создавать, редактировать, удалять задачи.
   - Поддержка статусов задач, приоритетов и комментариев.

3. **Интеграция ChatGPT:**
   - **Интеллектуальный чат** позволяет пользователям вводить запросы на создание задач или рекомендации.
   - Автоматизация рутинных задач: ChatGPT преобразует свободный текст в конкретные задачи.
   - Анализ пользовательской активности и создание отчетов.

4. **Уведомления:**
   - Сервис уведомлений обрабатывает события из Kafka и отправляет пользователям уведомления.

5. **Аудит действий:**
   - Логирование всех событий в системе для дальнейшего анализа.

6. **Инфраструктура:**
   - Контейнеризация через Docker, развертывание через Kubernetes.
   - CI/CD с помощью GitHub Actions.
   - Мониторинг и логирование через Prometheus и Grafana.

---

### Пример сценария работы системы:

1. **Создание задачи через ChatGPT:**
   - Пользователь пишет в чат: "Создать задачу для рефакторинга кода Task Service".
   - **ChatGPT Service** преобразует запрос в задачу с приоритетом и сроком выполнения.
   - **Task Service** сохраняет задачу в базе данных и публикует событие в Kafka.
   - **Notification Service** отправляет уведомление пользователям о новой задаче.
   - **Audit Service** записывает событие в журнал активности.

2. **Общий процесс работы:**
   - Пользователь взаимодействует с системой через интерфейс Vue.js.
   - Запросы проходят через **Gateway Service**, который маршрутизирует их к нужным микросервисам.
   - Микросервисы взаимодействуют друг с другом через события Kafka.
   - Пользователь получает уведомления о действиях в системе, а ChatGPT помогает автоматизировать задачи и предоставляет рекомендации.

---

### Scrum и управление проектом:

Kanban-доска (Jira):
Отображает текущее состояние задач: Backlog, In Progress, Review, Done.
Визуализация всех задач по микросервисам, фронтенду и интеграциям.
Управление Эпиками, Задачами и Техническими долгами.

Jira для Scrum:
Планирование спринтов, составление бэклога.
Спринты на 2 недели с акцентом на инкремент продукта.

Confluence для документации:
Ведение документации по архитектуре, API и бизнес-процессам.
Описание фич, аналитики и архитектурных решений.
---

### Основные этапы проекта:
1. Настройка инфраструктуры: Docker, Kubernetes, Kafka, PostgreSQL.
2. Разработка микросервисов (User, Task, Notification, Audit, Gateway).
3. Интеграция ChatGPT для автоматизации задач.
4. Настройка CI/CD через GitHub Actions.
5. Внедрение мониторинга и логирования.
6. Деплой и масштабирование системы через Kubernetes.

---