
### Roadmap User-service

#### Этап 1: Инициализация проекта
1. **Создание базового Spring Boot проекта**:
   - Стек: Spring Boot, Spring Data JPA
   - Подготовка Dockerfile для User-service.
   - Создание и настройка `docker-compose.yml`, включающего отдельные контейнеры для User-service, PostgreSQL и Redis.
   - Настройка CI/CD для автоматических сборок и деплоя в Docker через GitHub Actions.

2. **Настройка взаимодействия с базой данных (PostgreSQL)**:
   - Подключение PostgreSQL в отдельном контейнере.
   - Определение сущностей `User` (с полями `id`, `username`, `email`, `password`, `roles`).
   - Настройка подключения Spring Data JPA к контейнеру PostgreSQL.

3. **Настройка Redis для кеширования**:
   - Развертывание Redis в отдельном контейнере.
   - Интеграция с Redis в Spring Boot для кеширования данных пользователей.

4. **Создание API для управления пользователями**:
   - REST API: CRUD-операции для управления пользователями (создание, чтение, обновление, удаление).
   - Валидация данных и обработка ошибок через Spring Validation.
   - Swagger/OpenAPI документация для тестирования и описания API.

5. **Аутентификация и авторизация с использованием JWT**:
   - Настройка механизма аутентификации с использованием JWT токенов.
   - Генерация и проверка JWT токенов при авторизации.
   - Разграничение прав доступа на основе ролей (`ROLE_USER`, `ROLE_ADMIN`).
   - Управление access и refresh токенами.

#### Этап 2: Интеграция с другими микросервисами
6. **Интеграция с Kafka для отправки уведомлений**:
   - Настройка Kafka для асинхронной отправки уведомлений при регистрации пользователей.
   - Продюсер сообщений в Kafka из User-service.

7. **Интеграция с API Gateway**:
   - Настройка взаимодействия через API Gateway для маршрутизации запросов.

8. **Логирование и аудит через Audit-сервис**:
   - Отправка логов о действиях пользователя (регистрация, аутентификация, авторизация) в Audit-сервис.

#### Этап 3: Тестирование и оптимизация
9. **Тестирование**:
   - Написание юнит-тестов и интеграционных тестов с использованием MockMvc.
   - Тестирование API взаимодействий с Redis, PostgreSQL и Kafka.

10. **Оптимизация через Redis**:
    - Реализация кеширования пользователей с использованием Redis для повышения производительности.

11. **Логирование**:
    - Логирование операций User-service для мониторинга и аудита (включая использование Logback или ELK стека).

12. **Документирование API**:
    - Подключение Swagger для автоматической генерации документации API.

---

### Обновленная Kanban-доска для User-service

**Backlog**:
1. Инициализация Spring Boot проекта.
2. Подготовка Dockerfile для User-service.
3. Настройка `docker-compose.yml` для User-service, PostgreSQL и Redis.
4. Настройка PostgreSQL и подключение к User-service.
5. Развертывание Redis и интеграция с User-service для кеширования.
6. Настройка CRUD операций для пользователей.
7. Валидация данных.
8. Настройка аутентификации через JWT и refresh/access токенов.
9. Реализация авторизации на основе ролей.
10. Интеграция с Kafka для отправки уведомлений.
11. Интеграция с API Gateway.
12. Интеграция с Audit-сервисом.
13. Написание тестов для API.
14. Оптимизация кеширования через Redis.
15. Логирование действий пользователей.
16. Документирование API через Swagger.

**In Progress**:
- Инициализация проекта и подготовка Docker окружения.

**Testing**:
- Тестирование работы с Redis и PostgreSQL, JWT токенов, Kafka.

**Done**:
- Переносится по мере завершения задач.

